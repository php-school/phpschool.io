<p>When an exercise is to be verified, there are two ways for the solution to be invoked. This is either <a href="#exercise-type-cli">CLI</a> or
    <a href="#exercise-type-cgi">CGI</a>. Each exercise must have a type. This is used to determine how to invoke the script when verifying or running solutions. In order to explain the difference we will first show how a type translates to an actually php command.</p>
<p>When selecting you exercise type you must return the valid type and implement the respective interface.</p>

<?= $this->renderDocHeader('exercise-type-cli', 'CLI') ?>
<p>You choose the CLI type if you want the user to interact with the <code>$argv</code> and <code>$argc</code> super globals.</p>

<table class="exercise__type__info">
    <tbody>
        <tr>
            <td>Type</td>
            <td><code>ExerciseType::CLI()</code></td>
        </tr>
        <tr>
            <td>Interface</td>
            <td><code>PhpSchool\PhpWorkshop\Exercise\CliExercise</code></td>
        </tr>
        <tr>
            <td>Methods to implement</td>
            <td><code>getArgs</code></td>
        </tr>
    </tbody>
</table>

<h3>Implementing getArgs</h3>
<p><code>getArgs</code> should return an array of string. These are the arguments to be passed to the PHP CLI executable. The number of arguments which can be returned is not limited. All arguments should be strings.</p>

<pre><code class="lang-php">&lt;?php

namespace PhpSchool\MyWorkshop\Exercise;

use PhpSchool\PhpWorkshop\Exercise\AbstractExercise;
use PhpSchool\PhpWorkshop\Exercise\CliExercise;
use PhpSchool\PhpWorkshop\Exercise\ExerciseInterface;
use PhpSchool\PhpWorkshop\Exercise\ExerciseType;

class MyExercise extends AbstractExercise implements ExerciseInterface, CliExercise
{
     ...snip

    /**
     * @return array
     */
    public function getArgs()
    {
        return ['arg1', 'arg2', 'arg3'];
    }

    /**
     * @return ExerciseType
     */
    public function getType()
    {
        return ExerciseType::CLI();
    }
}
</code></pre>
<p>This exercise would cause PHP to be invoked like so:<p>
<pre><code lang="sh">php solution.php 'arg1' 'arg2' 'arg3'</code></pre>

<?= $this->renderDocHeader('exercise-type-cgi', 'CGI') ?>
<p>You choose the CGI type if you want the user to interact with the <code>$_GET</code>, <code>$_POST</code>, <code>$_SERVER</code>, etc super globals.</p>
<p>This exercise type allows to simulate a real HTTP request to a PHP script.</p>

<table class="exercise__type__info">
    <tbody>
        <tr>
            <td>Type</td>
            <td><code>ExerciseType::CGI()</code></td>
        </tr>
        <tr>
            <td>Interface</td>
            <td><code>PhpSchool\PhpWorkshop\Exercise\CgiExercise</code></td>
        </tr>
        <tr>
            <td>Methods to implement</td>
            <td><code>getRequests</code></td>
        </tr>
    </tbody>
</table>

<h3>Implementing getRequests</h3>
<p><code>getRequests</code> should return an array of PSR-7 Requests. The number of requests is not limited. Check <a target="_blank" href="http://www.php-fig.org/psr/psr-7/">here</a> for more information about PSR-7. The method is currently type hinted to return an array of the <a target="_blank" href="http://www.php-fig.org/psr/psr-7/#3-2-psr-http-message-requestinterface">Psr\Http\Message\RequestInterface</a> interface. You will need to use a library which implements the PSR-7 standard. Currently <a target="_blank" href="https://github.com/zendframework/zend-diactoros">zendframework/zend-diactoros</a> is shipped with <code>php-school/php-workshop</code> so you can just use that, or feel free to pull in a different implementation.</p>

<h4>Simulating a GET request</h4>
<pre><code class="lang-php">&lt;?php
namespace PhpSchool\MyWorkshop\Exercise;

use PhpSchool\PhpWorkshop\Exercise\AbstractExercise;
use PhpSchool\PhpWorkshop\Exercise\CgiExercise;
use PhpSchool\PhpWorkshop\Exercise\ExerciseInterface;
use PhpSchool\PhpWorkshop\Exercise\ExerciseType;
use Psr\Http\Message\RequestInterface;
use Zend\Diactoros\Request;

class MyExercise extends AbstractExercise implements ExerciseInterface, CgiExercise
{
    ...snip

    **
     * @return RequestInterface[]
     */
    public function getRequests()
    {
        return [
            (new Request('http://www.my-library.com?genre=punk&limit=50'))
                ->withMethod('GET')

        ];
    }

    /**
     * @return ExerciseType
     */
    public function getType()
    {
        return ExerciseType::CGI();
    }
}
</code></pre>
<p>The request above will result in PHP super globals looking something like this:</p>
<pre><code lang="php">//$_SERVER
array(13) {
    ["HTTP_HOST"] => string(18) "www.my-library.com"
    ["SCRIPT_FILENAME"] => string(57) "/root/path/your-workshop/get-solution.php"
    ["PWD"] => string(40) "/root/path/your-workshop"
    ["REDIRECT_STATUS"] => string(3) "302"
    ["SHLVL"] => string(1) "1"
    ["CONTENT_LENGTH"] => string(1) "0"
    ["QUERY_STRING"] => string(19) "genre=punk&limit=50"
    ["REQUEST_METHOD"] => string(3) "GET"
    ["_"] => string(48) "/usr/local/bin/php-cgi"
    ["__CF_USER_TEXT_ENCODING"] => string(13) "0x1F5:0x0:0x0"
    ["PHP_SELF"] => string(0) ""
    ["REQUEST_TIME_FLOAT"] => float(1458634262.4929)
    ["REQUEST_TIME"] => int(1458634262)
}

//$_GET
array(2) {
    ["genre"] => string(4) "punk"
    ["limit"] => string(2) "50"
}
</code></pre>
<h4>Simulating a POST request</h4>
<pre><code class="lang-php">&lt;?php

namespace PhpSchool\MyWorkshop\Exercise;

use PhpSchool\PhpWorkshop\Exercise\AbstractExercise;
use PhpSchool\PhpWorkshop\Exercise\CgiExercise;
use PhpSchool\PhpWorkshop\Exercise\ExerciseInterface;
use PhpSchool\PhpWorkshop\Exercise\ExerciseType;
use Psr\Http\Message\RequestInterface;
use Zend\Diactoros\Request;

class MyExercise extends AbstractExercise implements ExerciseInterface, CgiExercise
{
    ...snip

    /**
     * @return RequestInterface[]
     */
    public function getRequests()
    {
        $request1 = (new Request('http://www.my-library.com?genre=punk&limit=50'))
            ->withMethod('POST')
            ->withHeader('Content-Type', 'application/x-www-form-urlencoded');

        $request1->getBody()->write(urlencode(['genre' => 'punk', 'limit' => 200]));
        return [$request1];
    }

    /**
     * @return ExerciseType
     */
    public function getType()
    {
        return ExerciseType::CGI();
    }
}
</code></pre>
<p>The request above will result in PHP super globals looking something like this:</p>
<pre><code lang="php">//$_SERVER
 array(14) {
    ["HTTP_HOST"] => string(18) "www.my-library.com"
    ["SCRIPT_FILENAME"] => string(58) "/root/path/your-workshop/get-post-solution.php"
    ["HTTP_CONTENT_TYPE"] => string(33) "application/x-www-form-urlencoded"
    ["PWD"] => string(40) "/root/path/your-workshop"
    ["REDIRECT_STATUS"] => string(3) "302"
    ["SHLVL"] => string(1) "1"
    ["CONTENT_LENGTH"] => string(2) "17"
    ["CONTENT_TYPE"] => string(33) "application/x-www-form-urlencoded"
    ["REQUEST_METHOD"] => string(4) "POST"
    ["_"] => string(48) "/usr/local/bin/php-cgi"
    ["__CF_USER_TEXT_ENCODING"] => string(13) "0x1F5:0x0:0x0"
    ["PHP_SELF"] => string(0) ""
    ["REQUEST_TIME_FLOAT"] => double(1458845731.5657)
    ["REQUEST_TIME"] => int(1458845731)
 }

 //$_POST
 array(2) {
    ["genre"] => string(4) "punk"
    ["limit"] => string(2) "50"
 }
</code></pre>
<h3>How does this work?</h3>
<p>We use the <code>php-cgi</code> binary to setup the PHP environment. The php-cgi use environment variables and stdin to configure itself, we export these variables based on the information you provide in <code>getRequests</code></p>

<div class="note note-success">
    <ul class="docs__std__list__note">
        <li>You can return multiple request from <code>getRequests</code>.</li>
        <li>Each request can have a different method.</li>
        <li>Each request can have any amount of headers as you need.</li>
    </ul>
</div>
