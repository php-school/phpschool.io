<p>As we learned in the previous article, we can implement simple checking directly in our exercise if we don't want to
    build a check.</p>

<p>However, Self Checking is rather un-flexible in that you can only hook in to the verify/run process at one particular
    point, immediately after all other checks have run.</p>

<p>We also described the events features in previous chapters <a href="docs/reference/events">Events</a> &
    <a href="/docs/reference/creating-listener-checks">Creating Listener Checks</a>. Well, as it goes, any events
you can listen to in <em>Listener Checks</em>, you can listen to directly in your exercises!</p>

<p>Check it out:</p>

<pre><code class="lang-php">&lt;?php
class MyExercise extends AbstractExercise implements ExerciseInterface
{
    ...snip

    /**
     * @param ExerciseDispatcher $dispatcher
     */
    public function configure(ExerciseDispatcher $dispatcher)
    {
        $dispatcher->requireCheck(ComposerCheck::class);

        $dispatcher->getEventDispatcher()->listen('verify.start', function (Event $e) {
            //do something
        });
    }
}
</code></pre>

<p>You can grab the <doc-code>EventDispatcher</doc-code> from <doc-code>ExerciseDispatcher</doc-code> and listen to any events and
insert verifiers just like we did in
<a href="/docs/reference/creating-listener-checks#build-it">Creating Listener Checks</a> when we inserted a verifier
    function which verifies the state of a Couch DB database.</p>

<note type="success">You can listen to any of the events listed on <a href="/docs/reference/events">Events</a>.
</note>