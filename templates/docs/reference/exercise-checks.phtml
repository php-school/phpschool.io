<p>The main task of the workshop framework is to compare the output of the student's solution with the output of the
    reference solution, it is not however, limited to this. In this article we will introduce the workshop exercise
    check feature.</p>

<content-header id="what-are-checks">What are Checks?</content-header>
<p>Checks are extra verifications that can be performed during the process of verifying a students solution to an
    exercise. Each exercise can utilise any amount of additional checks.</p>

<content-header id="check-types">Check Types</content-header>
<p>There are two types of checks: <doc-code>Simple</doc-code> & <doc-code>Listener</doc-code>. What are the differences? Read on!</p>

<content-header level="h4" id="simple-checks">Simple Checks</content-header>
<p>Simple checks are basically a block of code that can run before or after verifying the output of the students
    solution. There can be many checks, which will be run sequentially - each check can return a success or
    failure and this will be injected into the result set.</p>

<content-header level="h4" id="listener-checks">Listener Checks</content-header>
<p>Listener checks are more advanced - when you add a listener type check, it will be passed an event dispatcher
    (<doc-code>PhpSchool\PhpWorkshop\Event\EventDispatcher</doc-code>) which can be used to listen to various events
    throughout the life-cycle of verifying. Learn more about Listener Checks and the events which can be listened to in
    the <a href="/docs/reference/creating-listener-checks">Listener checks documentation</a>.</p>

<content-header id="how-to-use">How to use a check in your exercise?</content-header>

<content-header level="h4" id="step-1">1. Tell the dispatcher about your check requirements</content-header>
<p>In order to specify that your exercise requires additional checks you should implement the method
    <doc-code>configure</doc-code> in your exercise. It will be passed an instance of <doc-code>ExerciseDispatcher</doc-code> which
    you can interact with and tell it which checks your exercise requires. The method <doc-code>configure</doc-code> is already
    implemented in <doc-code>AbstractExercise</doc-code>, but is empty, so you don't need to call
    <doc-code>parent::configure($dispatcher)</doc-code> inside your method.</p>

<pre><code class="lang-php">class MyExercise extends AbstractExercise implements ExerciseInterface
{
    ...snip

    /**
     * @param ExerciseDispatcher $dispatcher
     */
    public function configure(ExerciseDispatcher $dispatcher)
    {
        $dispatcher->requireCheck(ComposerCheck::class);
    }
}
</code></pre>

<p>This basically informs the workshop framework that when verifying the student's solution to this exercise, we should
    also run the <doc-code>ComposerCheck</doc-code> check. To learn what the <doc-code>ComposerCheck</doc-code> check actually does go
    to the <a href="/docs/reference/bundled-checks">Bundled Checks</a> page.</p>

<content-header level="h4" id="step-2">2. Implement the required interface and methods</content-header>
<p>The second and final step is to implement the correct interface in your exercise. If you do not do this the workshop
    framework will throw an exception when it tries to run the check. Each check has an interface you need to implement
    when requiring it in your exercise. This interface can be found by visiting the
    <a href="/docs/reference/bundled-checks">Bundled Checks</a> page or by looking at the
    <doc-code>getExerciseInterface()</doc-code> method of the check. This method returns a string containing the FQCN (Fully
    Qualified Class Name) of the interface the check requires your exercise to implement.</p>

<p>Some of the bundled checks only require you to implement
    <doc-code>PhpSchool\PhpWorkshop\Exercise\ExerciseInterface</doc-code> which you will have to do anyway as part of building
    your exercise. Some checks require you to implement additional interfaces which introduce new methods to your
    exercise. These methods provide the checks with the necessary information to execute. For example, the
    <doc-code>ComposerCheck</doc-code> requires you to implement the
    <doc-code>PhpSchool\PhpWorkshop\ExerciseCheck\ComposerExerciseCheck</doc-code> interface, which, in turn,
    requires your exercise to implement the method <doc-code>getRequiredPackages</doc-code>.</p>

<p>So, your exercise, taking advantage of the <doc-code>ComposerExerciseCheck</doc-code> may end up looking something like the
    following:</p>

<pre><code class="lang-php">class MyExercise extends AbstractExercise implements
        ExerciseInterface,
        ComposerExerciseCheck
{
    ...snip

    /**
     * @param ExerciseDispatcher $dispatcher
     */
    public function configure(ExerciseDispatcher $dispatcher)
    {
        $dispatcher->requireCheck(ComposerCheck::class);
    }

    /**
     * @return array
     */
    public function getRequiredPackages()
    {
        return [
            'nikic/fast-route'
        ];
    }

}
</code></pre>
