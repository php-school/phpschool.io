<p>There are various events triggered throughout the verifying and running of exercises. These events
can be used by <a href="/docs/reference/creating-listener-checks">Listener Checks</a> to hook in to the process
at various stages. This article details the events and the arguments available.</p>

<p>Each event implements <doc-code>PhpSchool\PhpWorkshop\Event\EventInterface</doc-code> where you can grab the parameters like
    <doc-code>$event->getParameter('myParam');</doc-code> some events may have convenience methods for accessing certain
    parameters, please refer to the particular event class for more info.</p>

<p>There are 4 routes through the application, and the lists of events below each represent a timeline
of one of those routes.</p>

<h3 id="cli-verify">CLI Verify</h3>
<p>This is the route taken when using the <doc-code>verify</doc-code> command on a <doc-code>CLI</doc-code> type exercise.</p>
<h3 id="cli-run">CLI Run</h3>
<p>This is the route taken when using the <doc-code>run</doc-code> command on a <doc-code>CLI</doc-code> type exercise.</p>
<h3 id="cgi-verify">CGI Verify</h3>
<p>This is the route taken when using the <doc-code>verify</doc-code> command on a <doc-code>CGI</doc-code> type exercise.</p>
<h3 id="cgi-run">CGI Run</h3>
<p>This is the route taken when using the <doc-code>run</doc-code> command on a <doc-code>CGI</doc-code> type exercise.</p>

<content-header id="listening">Listening to Events</content-header>

<p>Events can be listened to by attaching to the event dispatcher with any valid PHP callable:</p>

<pre><code lang="php">&lt;?php

$eventDispatcher = $container->get(PhpSchool\PhpWorkshop\Event\EventDispatcher:class);
$eventDispatcher->listen('verify.start', function (Event $event) {
    //do something
});

// you can also listen to multiple events in one call

$eventDispatcher->listen(['verify.start', 'run.start'], function (Event $event) {
    //do something
});
</code></pre>

<p>With the event dispatcher you can even do more interesting things, such as, at any event, you can insert
a verifier (any valid PHP callable) - it will be passed the event, the same as a normal listener, but it must return
an implementation of <doc-code>PhpSchool\PhpWorkshop\Result\ResultInterface</doc-code>. This will be evaluated and injected in
to the results for reporting on the CLI. <doc-code>PhpSchool\PhpWorkshop\Result\SuccessInterface</doc-code> instances will be
treated as successes and <doc-code>PhpSchool\PhpWorkshop\Result\FailureInterface</doc-code> instances will be treated as
failures. So you can actually fail a verification attempt via an event.</p>

<note type="info">Learn more about results <a href="/docs/reference/results">here</a>.</note>

<p>This is useful for <em>Listener Checks</em>, for example, towards the end of the verifying process, you may
want to verify that some data was inserted to a database. If it was not you will return a failure, which will
be displayed on the CLI and will cause the verification attempt to fail.</p>

<p>How to insert verifiers:</p>

<pre><code lang="php">&lt;?php

$eventDispatcher = $container->get(PhpSchool\PhpWorkshop\Event\EventDispatcher:class);
$eventDispatcher->insertVerifier('verify.finish', function (Event $event) {
    if (!$this->checkDb()) {
        return Failure::fromNameAndReason('DB Check', 'DB Verification failed!');
    }
    return new Success('DB Check');
});

</code></pre>

<content-header id="event-list">Events</content-header>

<event-list></event-list>






