<p>In the previous section, we learned of all the events dispatched throughout the process of verifying
and running a student's solution to an exercise. In this this section we will learn how these events can be used to build
    a <em>Listener Check</em>.</p>

<content-header id="what-is-a-listener-check">What is a Listener Check?</content-header>

<p>We learned about <em>Simple Checks</em> in <a href="/docs/reference/exercise-checks">Exercise Checks</a>, they are simple
    pieces of code which can run before or after verifying a student's solution to an exercise. <em>Listener Checks</em> allow us to hook in to
the verifying and running process with more granular precision. <em>Listener Checks</em> can run pieces of code at any point where an
event is dispatched. Check the <a href="/docs/reference/events">Events</a> page for a list of available events which
your <em>Listener Check</em> can listen to.</p>

<p>Listener Checks are one of the most complex components of the workshop application, so in order to demonstrate their use-case,
we will build a <em>Listener Check</em> which allows us to interact with <a href="http://couchdb.apache.org/">Couch DB</a>. We will then build an exercise in our tutorial
application which utilises this check.</p>

<ul>
    <li>
        <a target="_blank" href="https://github.com/php-school/couch-db-check">The finished Couch DB Check</a>
    </li>
    <li>
        <a target="_blank" href="https://github.com/php-school/simple-math/compare/couch-db-exercise?expand=1">Exercise utilising the check</a>
    </li>
</ul>

<content-header id="check-specification">Check Specification</content-header>
<p>Before we build anything we should design our check. What should it do?</p>

<p><a>Couch DB</a> is a NoSQL database, which stores data as JSON documents and it's API is provided via regular
    HTTP.</p>

<p>So, we want to introduce the features of Couch DB via this Listener Check. What should it do?</p>

<ul>
    <li>Be applicable to only <doc-code>CLI</doc-code> type exercises.</li>
    <li>Create 2 databases, one for the student solution and one for the reference solution.</li>
    <li>Pass the databases names to the programs.</li>
    <li>Remove the databases at the end of the verify/run process and in case of any failures.</li>
    <li>Allow for exercises to seed the two databases with data.</li>
    <li>Allow for exercises to verify the data in the database after the solutions have executed.</li>
</ul>

<content-header id="check-events">What events to use?</content-header>

<p>Reading this specification we can see that we will need to hook in to various events to provide this
    functionality, we will now break down each point and decide what events to listen to.</p>

<content-header level="h4" id="db-create">Creating the databases</content-header>
<p>We will need to create databases in both <doc-code>verify</doc-code> & <doc-code>run</doc-code> mode, we can do this immediately
in our <doc-code>attach</doc-code> method, which is automatically called when we register our check within an exercise.</p>

<content-header level="h4" id="db-seed">Seed the database</content-header>
<p>We will need to allow the exercise to seed the database, we should do this early on <doc-code>verify.start</doc-code> &
    <doc-code>run.start</doc-code> are the earliest events dispatched. These sound like good candidates to perform this task. We
will pass a client object to the exercise <doc-code>seed</doc-code> method so they can create documents.</p>

<content-header level="h4" id="db-arg">Pass database name to the programs</content-header>
<p>We will need to pass the database names to the programs (student's solution & the reference solution) so the programs
    can access it via the <doc-code>$argv</doc-code> array. We can do this with any events which trigger with an instance of
    <doc-code>CliExecuteEvent</doc-code>. We can use <doc-code>cli.verify.reference-execute.pre</doc-code>,
    <doc-code>cli.verify.student-execute.pre</doc-code> & <doc-code>cli.run.student-execute.pre</doc-code>.</p>

<content-header level="h4" id="db-verify">Verify the database</content-header>

<p>We will need to allow the exercise to verify the database, we should do this after output verification has finished.
We can pick one of the last events triggered, <doc-code>verify.finish</doc-code> will do! We will
pass the database client object again to the exercise <doc-code>verify</doc-code> method so they can verify the state of the
database.</p>

<content-header level="h4" id="db-cleanup">Cleanup the database</content-header>
<p>We will need to remove the databases we created at the end of the process. We can use <doc-code>verify.finish</doc-code> &
<doc-code>run.finish</doc-code> to do this. We will also listen to <doc-code>cli.verify.reference-execute.fail</doc-code> so in case
something goes wrong, we still cleanup.</p>

<content-header id="build-it">Now let's build the check!</content-header>

<p>The finished <a href="https://github.com/php-school/couch-db-check">Couch DB check</a> is available as a
separate Composer package for you to use in your workshops right away, but, for the sake of this tutorial we will build
    it using the <a href="https://github.com/php-school/simple-math">tutorial application</a> as a base so we do not have
    to setup a new project with composer files, register it with <a href="https://packagist.org/">Packagist</a> and so
    on.</p>

<p>We will start fresh from the <doc-code>master</doc-code> branch for this tutorial, so if you haven't already got it, git
    clone it and install the dependencies:</p>

<terminal :lines="['cd projects', 'git clone git@github.com:php-school/simple-math.git', 'cd simple-math', 'composer install']"></terminal>

<content-header level="h4" id="check-step-1">1. Require doctrine/couchdb as a dependency</content-header>
<p>We will use this library to interact with Couch DB.</p>
<terminal :lines='["composer require \"doctrine/couchdb:^1.0@beta\""]'></terminal>

<content-header level="h4" id="check-step-2">2. Create the folders and classes</content-header>
<terminal :lines='["mkdir src/Check", "mkdir src/ExerciseCheck", "touch src/Check/CouchDbCheck.php", "touch src/ExerciseCheck/CouchDbExerciseCheck.php"]'></terminal>

<content-header level="h4" id="check-step-3">3. Define our interface</content-header>
<p>We mentioned before that we needed a way for the exercise to seed and verify the database, so we will define an
interface which describes these methods which the exercise must implement for the Couch DB check. These
methods will automatically be invoked by the check. Open up <doc-code>src/ExerciseCheck/CouchDbExerciseCheck.php</doc-code>
and add the following code to it:</p>

<pre><code class="lang-php">&lt;?php

namespace PhpSchool\SimpleMath\ExerciseCheck;

use Doctrine\CouchDB\CouchDBClient;

interface CouchDbExerciseCheck
{
    /**
     * @param CouchDBClient $couchDbClient
     * @return void
     */
    public function seed(CouchDBClient $couchDbClient);

    /**
     * @param CouchDBClient $couchDbClient
     * @return bool
     */
    public function verify(CouchDBClient $couchDbClient);
}
</code></pre>

<p>We define, two methods <doc-code>seed()</doc-code> & <doc-code>verify()</doc-code>, both receive an instance of
    <code>CouchDBClient</code> which will be connected to the database created for the student, <doc-code>seed()</doc-code>
should be called before the student's solution is run and <doc-code>verify()</doc-code> should be called after the student's
solution is run.</p>

<content-header level="h4" id="check-step-4">4. Write the check</content-header>

<note type="info">For this check, we assume that Couch DB is always
    running at <doc-code>http://localhost:5984/</doc-code>as is default when Couch DB is installed.</note>

<p>Now we write the check - there is quite a lot of code here so we will do it in steps, open up
    <doc-code>src/Check/CouchDbCheck.php</doc-code> and start with the following:</p>

<pre><code class="lang-php">&lt;?php

namespace PhpSchool\SimpleMath;

use Doctrine\CouchDB\CouchDBClient;
use Doctrine\CouchDB\HTTP\HTTPException;
use PhpSchool\PhpWorkshop\Check\ListenableCheckInterface;
use PhpSchool\PhpWorkshop\Event\EventDispatcher;
use PhpSchool\SimpleMath\ExerciseCheck\CouchDbExerciseCheck;

class CouchDbCheck implements ListenableCheckInterface
{
    /**
     * @var string
     */
    private static $studentDb = 'phpschool-student';

    /**
     * @var string
     */
    private static $solutionDb = 'phpschool';

    /**
     * Return the check's name
     *
     * @return string
     */
    public function getName()
    {
        return 'Couch DB Verification Check';
    }

    /**
     * This returns the interface the exercise should implement
     * when requiring this check
     *
     * @return string
     */
    public function getExerciseInterface()
    {
        return CouchDbExerciseCheck::class;
    }

    /**
     * @param EventDispatcher $eventDispatcher
     */
    public function attach(EventDispatcher $eventDispatcher)
    {

    }
}
</code></pre>

<p>There is not much going on here - we define <doc-code>getName()</doc-code> which is the name of our check, and
<doc-code>getExerciseInterface()</doc-code> which should return the FQCN (Fully Qualified Class Name) of the interface we
just defined earlier. This is so the workshop framework can check the exercise implements it. We also define some
properties which describe the names of the Couch DB databases we will setup: one for the student and one for the reference
solution.</p>

<p>The most important thing to note in this check is that we implement
    <doc-code>PhpSchool\PhpWorkshop\Check\ListenableCheckInterface</doc-code> instead of
    <doc-code>PhpSchool\PhpWorkshop\Check\SimpleCheckInterface</doc-code>. They both inherit from
    <doc-code>PhpSchool\PhpWorkshop\Check\CheckInterface</doc-code> which introduces <doc-code>getName()</doc-code> &
    <doc-code>getExerciseInterface()</doc-code>. <doc-code>ListenableCheckInterface</doc-code> brings in one other additional method:
    <doc-code>attach()</doc-code>. This method is called immediately when an exercise requires any <em>Listener Check</em> and is
    passed an instance of <doc-code>PhpSchool\PhpWorkshop\Event\EventDispatcher</doc-code> allowing the check to listen to any
    events which might be dispatched throughout the verifying/running process.</p>

<p>Our check will listen to a number of those events so we will build this method up step by step.</p>

<content-header level="h5" id="db-create">Create the databases</content-header>
<p>The first thing we need to do is create the two databases, so we create two Couch DB clients and issue
the <doc-code>createDatabase</doc-code> method:</p>

<pre><code class="lang-php">$studentClient = CouchDBClient::create(['dbname' => static::$studentDb);
$solutionClient = CouchDBClient::create(['dbname' => static::$solutionDb]);

$studentClient->createDatabase($studentClient->getDatabase());
$solutionClient->createDatabase($solutionClient->getDatabase());
</code></pre>

<content-header level="h5" id="db-seed">Seed the databases for verify mode</content-header>
<p>We need to allow the exercise to seed the database to create documents, for example. The database for the
student and the reference solution should contain the same data, but they must be different databases.</p>

<note type="info">The reason why both programs need their own database is fairly simple. Say the exercise's
lesson was to teach how to remove a document in the database. It would first need to create a document in the
database using the <doc-code>seed</doc-code> method. The student's solution should remove that document. If the student's
solution and the reference solution shared one database, then the reference solution
would run first and remove the row. Then the student's solution would run...it can't remove the document
because it's not there anymore!</note>

<note type="danger">We can't just call <doc-code>seed()</doc-code> again because <doc-code>seed()</doc-code> can return dynamic data and then
the student's solution and the reference solution would run with different data sets; which makes it
impossible to compare their output.</note>

<pre><code class="lang-php">$eventDispatcher->listen('verify.start', function (Event $e) use ($studentClient, $solutionClient) {
    $e->getParameter('exercise')->seed($studentClient);
    $this->replicateDbFromStudentToSolution($studentClient, $solutionClient);
});
</code></pre>

<p>We listen to the <doc-code>verify.start</doc-code> event which (as you can probably infer) triggers right at the start of
the verify process. The listener is an anonymous function that grabs the exercise instance from the event and calls the
    <doc-code>seed()</doc-code> method passing in the <doc-code>CouchDBClient</doc-code> which references the database created for
the student. We also need to seed the database for reference solution, we need it to be exactly the same as the
    student's so we basically select all documents from the student database and insert them in to the reference
    solution database. We do this in the method <doc-code>replicateDbFromStudentToSolution</doc-code>. This method looks
    like the following:</p>

<pre><code class="lang-php">/**
 * @param CouchDBClient $studentClient
 * @param CouchDBClient $solutionClient
 * @throws \Doctrine\CouchDB\HTTP\HTTPException
 */
private function replicateDbFromStudentToSolution(CouchDBClient $studentClient, CouchDBClient $solutionClient)
{
    $response = $studentClient->allDocs();

    if ($response->status !== 200) {
        return;
    }

    foreach ($response->body['rows'] as $row) {
        $doc = $row['doc'];

        $data = array_filter($doc, function ($key) {
            return !in_array($key, ['_id', '_rev']);
        }, ARRAY_FILTER_USE_KEY);

        try {
            $solutionClient->putDocument(
                $data,
                $doc['_id']
            );
        } catch (HTTPException $e) {
        }
    }
}
</code></pre>

<content-header level="h5" id="db-seed-run">Seed the database for run mode</content-header>
<p>When in run mode, no output is compared - we merely run the student's solution - so we only need to seed
the student's database. There is a similar event to <doc-code>verify.start</doc-code> when in run mode, aptly named
<doc-code>run.start</doc-code>, let's use that:</p>

<pre><code class="lang-php">$eventDispatcher->listen('run.start', function (Event $e) use ($studentClient) {
    $e->getParameter('exercise')->seed($studentClient);
});
</code></pre>

<content-header level="h5" id="db-arg">Adding the database name to the programs' arguments</content-header>
<p>We need the programs (student solution & the reference solution) to have access to their respective database
names, the best way to do this is via command line arguments - we can add arguments to the list of arguments to
be sent to the programs with any event which triggers with an instance of <doc-code>CliExecuteEvent</doc-code>. It exposes
the <doc-code>prependArg()</doc-code> & <doc-code>appendArg()</doc-code> methods.</p>

<p>We use <doc-code>cli.verify.reference-execute.pre</doc-code> to prepend the reference database name to the reference
solution program when in <doc-code>verify</doc-code> mode and we use <doc-code>cli.verify.student-execute.pre</doc-code> &
<doc-code>cli.run.student-execute.pre</doc-code> to prepend the student database name to the student solution in
    <doc-code>verify</doc-code> & <doc-code>run</doc-code> mode, respectively.</p>

<pre><code class="lang-php">$eventDispatcher->listen('cli.verify.reference-execute.pre', function (CliExecuteEvent $e) {
    $e->prependArg('phpschool');
});

$eventDispatcher->listen(
    ['cli.verify.student-execute.pre', 'cli.run.student-execute.pre'],
    function (CliExecuteEvent $e) {
        $e->prependArg('phpschool-student');
    }
);
</code></pre>

<content-header level="h5" id="db-verify">Verify the database</content-header>
<p>After the programs have been executed, we need a way to let the exercise verify the contents of the database. We hook
on to an event during the <doc-code>verify</doc-code> process named <doc-code>verify.finish</doc-code> (this is the last event in
the verify process) and insert a verifier function. We don't need to verify the database in <doc-code>run</doc-code> mode
because all we do in run mode is <em>run</em> the students submission in the correct environment
(with args and database).</p>

<pre><code class="lang-php">$eventDispatcher->insertVerifier('verify.finish', function (Event $e) use ($studentClient) {
    $verifyResult = $e->getParameter('exercise')->verify($studentClient);

    if (false === $verifyResult) {
        return Failure::fromNameAndReason($this->getName(), 'Database verification failed');
    }

    return Success::fromCheck($this);
});
</code></pre>

<p>Verify functions are used to inject results into the result set, which is then reported to the student. So you
can see that if the <doc-code>verify</doc-code> method returns <doc-code>true</doc-code> we return a <doc-code>Success</doc-code> to
the result set but if it returns false we return a <doc-code>Failure</doc-code> result, with a message, so the student knows
what went wrong.</p>

<note type="success">The Event Dispatcher takes care of running the verifier function at the correct event
and injects the returned result in to the result set.</note>

<content-header level="h5" id="db-cleanup">Cleanup the databases</content-header>
<p>The final stage is to remove the databases, we listen to <doc-code>verify.post.execute</doc-code> for the verify process
& <doc-code>run.finish</doc-code> for the run process:</p>

<pre><code class="lang-php">$eventDispatcher->listen(
    [
        'verify.post.execute',
        'run.finish'
    ],
    function (Event $e) use ($studentClient, $solutionClient) {
        $studentClient->deleteDatabase(static::$studentDb);
        $solutionClient->deleteDatabase(static::$solutionDb);
    }
);
</code></pre>

<note type="success">Great - our check is finished! You can see the final result as a separate Composer package,
    <a href="https://github.com/php-school/couch-db-check">available here.</a>
</note>

<p>Our final check should look like:</p>

<pre><code class="lang-php">&lt;?php

namespace PhpSchool\SimpleMath;

use Doctrine\CouchDB\CouchDBClient;
use Doctrine\CouchDB\HTTP\HTTPException;
use PhpSchool\PhpWorkshop\Check\ListenableCheckInterface;
use PhpSchool\PhpWorkshop\Event\EventDispatcher;
use PhpSchool\SimpleMath\ExerciseCheck\CouchDbExerciseCheck;

class CouchDbCheck implements ListenableCheckInterface
{
    /**
     * @var string
     */
    private static $studentDb = 'phpschool-student';

    /**
     * @var string
     */
    private static $solutionDb = 'phpschool';

    /**
     * Return the check's name
     *
     * @return string
     */
    public function getName()
    {
        return 'Couch DB Verification Check';
    }

    /**
     * This returns the interface the exercise should implement
     * when requiring this check
     *
     * @return string
     */
    public function getExerciseInterface()
    {
        return CouchDbExerciseCheck::class;
    }

    /**
     * @param EventDispatcher $eventDispatcher
     */
    public function attach(EventDispatcher $eventDispatcher)
    {
        $studentClient = CouchDBClient::create(['dbname' => static::$studentDb);
        $solutionClient = CouchDBClient::create(['dbname' => static::$solutionDb]);

        $studentClient->createDatabase($studentClient->getDatabase());
        $solutionClient->createDatabase($solutionClient->getDatabase());

        $eventDispatcher->listen('verify.start', function (Event $e) use ($studentClient, $solutionClient) {
            $e->getParameter('exercise')->seed($studentClient);
            $this->replicateDbFromStudentToSolution($studentClient, $solutionClient);
        });

        $eventDispatcher->listen('run.start', function (Event $e) use ($studentClient) {
            $e->getParameter('exercise')->seed($studentClient);
        });

        $eventDispatcher->listen('cli.verify.reference-execute.pre', function (CliExecuteEvent $e) {
            $e->prependArg('phpschool');
        });

        $eventDispatcher->listen(
            ['cli.verify.student-execute.pre', 'cli.run.student-execute.pre'],
            function (CliExecuteEvent $e) {
                $e->prependArg('phpschool-student');
            }
        );

        $eventDispatcher->listen(
            [
                'verify.post.execute',
                'run.finish'
            ],
            function (Event $e) use ($studentClient, $solutionClient) {
                $studentClient->deleteDatabase(static::$studentDb);
                $solutionClient->deleteDatabase(static::$solutionDb);
            }
        );
    }

    /**
     * @param CouchDBClient $studentClient
     * @param CouchDBClient $solutionClient
     * @throws \Doctrine\CouchDB\HTTP\HTTPException
     */
    private function replicateDbFromStudentToSolution(CouchDBClient $studentClient, CouchDBClient $solutionClient)
    {
        $response = $studentClient->allDocs();

        if ($response->status !== 200) {
            return;
        }

        foreach ($response->body['rows'] as $row) {
            $doc = $row['doc'];

            $data = array_filter($doc, function ($key) {
                return !in_array($key, ['_id', '_rev']);
            }, ARRAY_FILTER_USE_KEY);

            try {
                $solutionClient->putDocument(
                    $data,
                    $doc['_id']
                );
            } catch (HTTPException $e) {
            }
        }
    }
}
</code></pre>

<content-header id="using-the-check">Build an exercise using the Couch DB check</content-header>

<p>So then, this Couch DB check is not much use if we don't utilise it! let's build an exercise which retrieves a document
from a database, sums a bunch of numbers and adds the total to the document, finally we should output the total.
The document with the numbers in it will be automatically created by our exercise in the <doc-code>seed()</doc-code> method
and will be random.</p>

<p>As always we will start from a fresh copy of the
    <a href="https://github.com/php-school/simple-math">tutorial application</a>:</p>

<terminal :lines='["cd projects", "git clone git@github.com:php-school/simple-math.git", "cd simple-math", "composer install"]'></terminal>

<p>We will use the check that is available in the already built Composer package, so, pull it in to your
    project:</p>

<terminal :lines='["composer require \"doctrine/couchdb:^1.0@beta\"", "composer require php-school/couch-db-check"]'></terminal>

<note type="info">We have to manually require <doc-code>doctrine/couchdb</doc-code> even though it is a dependency
of <doc-code>php-school/couch-db-check</doc-code> because there is no stable release available. Indirect dependencies
cannot install non-stable versions.</note>

<content-header id="exercise-problem">Problem file</content-header>

<p>Create a problem file in <doc-code>exercises/couch-db-exercise/problem/problem.md</doc-code>. Here we describe the problem
we mentioned earlier when we decided what we wanted our exercise to do:</p>

<pre><code class="lang-md">Write a program that accepts the name of database and a Couch DB document ID. You should load this document using the
provided ID from the provided database. In the document will be a key named `numbers`. You should add them all up
and add the total to the document under the key `total`. You should save the document and finally output the total to
the console.

You must have Couch DB installed before you run this exercise, you can get it here:
  [http://couchdb.apache.org/#download]()

----------------------------------------------------------------------
## HINTS

You could use a third party library to communicate with the Couch DB instance, see this doctrine library:
  [https://github.com/doctrine/couchdb-client]()

Or you could interact with it using a HTTP client such as Guzzle:
  [https://github.com/guzzle/guzzle]()

Or you could simply use `curl`.

Check out how to interact with Couch DB documents here:
  [http://docs.couchdb.org/en/1.6.1/intro/api.html#documents]()

You will need to do this via PHP.

You specifically need the `GET` and `PUT` methods, or if you are using a library abstraction, you will need to
`find` and `update` the document.


You can use the doctrine library like so:

```php
&lt;?php
require_once __DIR__ . '/vendor/autoload.php';

use Doctrine\CouchDB\CouchDBClient;
$client = CouchDBClient::create(['dbname' => $dbName]);

//get doc
$doc = $client->findDocument($docId);

//update doc
$client->putDocument($updatedDoc, $docId, $docRevision);
```

`{appname}` will be supplying arguments to your program when you run `{appname} verify program.php` so you don't need to supply them yourself. To test your program without verifying it, you can invoke it with `{appname} run program.php`. When you use `run`, you are invoking the test environment that `{appname}` sets up for each exercise.

----------------------------------------------------------------------
</code></pre>

<p>We note that the student must have Couch DB installed, we give a few links, an example of how to use the
Doctrine Couch DB client and we describe the actual task.</p>

<content-header id="exercise">Write the exercise</content-header>

<p>Create the exercise in <doc-code>src/Exercise/CouchDbExercise.php</doc-code>:</p>

<pre><code class="lang-php">&lt;?php

namespace PhpSchool\SimpleMath\Exercise;

use Doctrine\CouchDB\CouchDBClient;
use PhpSchool\CouchDb\CouchDbCheck;
use PhpSchool\CouchDb\CouchDbExerciseCheck;
use PhpSchool\PhpWorkshop\Exercise\AbstractExercise;
use PhpSchool\PhpWorkshop\Exercise\CliExercise;
use PhpSchool\PhpWorkshop\Exercise\ExerciseInterface;
use PhpSchool\PhpWorkshop\Exercise\ExerciseType;
use PhpSchool\PhpWorkshop\ExerciseDispatcher;

class CouchDbExercise extends AbstractExercise implements
    ExerciseInterface,
    CliExercise,
    CouchDbExerciseCheck
{
    /**
     * @var string
     */
    private $docId;

    /**
     * @var int
     */
    private $total;

    /**
     * @return string
     */
    public function getName()
    {
        return 'Couch DB Exercise';
    }

     /**
     * @return string
     */
    public function getDescription()
    {
        return 'Intro to Couch DB';
    }

    /**
     * @return string[]
     */
    public function getArgs()
    {
        return [$this->docId];
    }

    /**
     * @return ExerciseType
     */
    public function getType()
    {
        return ExerciseType::CLI();
    }

    /**
     * @param ExerciseDispatcher $dispatcher
     */
    public function configure(ExerciseDispatcher $dispatcher)
    {
        $dispatcher->requireCheck(CouchDbCheck::class);
    }

    /**
     * @param CouchDBClient $couchDbClient
     * @return void
     */
    public function seed(CouchDBClient $couchDbClient)
    {
        $numArgs = rand(4, 20);
        $args = [];
        for ($i = 0; $i < $numArgs; $i ++) {
            $args[] = rand(1, 100);
        }

        list($id) = $couchDbClient->postDocument(['numbers' => $args]);

        $this->docId = $id;
        $this->total = array_sum($args);
    }

    /**
     * @param CouchDBClient $couchDbClient
     * @return bool
     */
    public function verify(CouchDBClient $couchDbClient)
    {
        $total = $couchDbClient->findDocument($this->docId);

        return isset($total->body['total']) && $total->body['total'] == $this->total;
    }
}
</code></pre>

<p>So - in <doc-code>seed</doc-code> we create a random number of random numbers and insert a document containing
these numbers under a key named <doc-code>numbers</doc-code>. We store the total (for verification purposes)
and also the document ID (this is auto generated by Couch DB) so we can pass it to the solutions as an
    argument.</p>

<p>In the <doc-code>verify</doc-code> method, we try load the document with the stored ID, check for the presence
of the <doc-code>total</doc-code> property and check that it is equal to the stored total we set during
    <doc-code>seed</doc-code>. </p>

<p>In <doc-code>configure()</doc-code> we require our Couch DB check and in <doc-code>getType()</doc-code> we inform the
the workshop framework that this is a CLI type exercise.</p>

<p>In <doc-code>getArgs()</doc-code> we return the Document ID we set during <doc-code>seed</doc-code>.</p>
<note type="info">Because <doc-code>seed</doc-code> is invoked from an event which is dispatched before
<doc-code>getArgs</doc-code>, we can rely on anything set there.</note>

<note type="success">The students solution would therefore be invoked like:
<doc-code>php my-solution.php phpschool-student 18</doc-code>. The argument <doc-code>phpschool-student</doc-code> being
the database name created for the student by the check (remember the check prepends this argument to the argument list)
and 18 being the ID of the document we created!</note>

<content-header id="reference-solution">Write the reference solution</content-header>

<p>Our reference solution will also use the Doctrine Couch DB library - let's go ahead and create the
solution in <doc-code>exercises/couch-db-exercise/solution</doc-code>. We will need three files
<doc-code>composer.json</doc-code>, <doc-code>composer.lock</doc-code> and <doc-code>solution.php:</doc-code></p>

<content-header level="h4-code" id="solution-php">solution.php</content-header>
<pre><code class="lang-php">&lt;?php
require_once __DIR__ . '/vendor/autoload.php';

use Doctrine\CouchDB\CouchDBClient;

$client = CouchDBClient::create(['dbname' => $argv[1]]);
$doc = $client->findDocument($argv[2])->body;

$total = array_sum($doc['numbers']);
$doc['total'] = $total;
$client->putDocument(['total' => $total, 'numbers' => $doc['numbers']], $argv[2], $doc['_rev']);
echo $total;
</code></pre>

<content-header level="h4-code" id="composer-json">composer.json</content-header>
<pre><code class="lang-json">{
    "name": "php-school/couch-db-exercise-ref-solution",
    "description": "Intro to Couch DB",
    "require": {
        "doctrine/couchdb": "^1.0@beta"
    }
}

</code></pre>

<content-header level="h4-code" id="composer-lock">composer.lock</content-header>
<note type="info"><doc-code>composer.lock</doc-code> is auto generated by Composer, by running
    <doc-code>composer install</doc-code> in <doc-code>exercises/couch-db-exercise/solution</doc-code></note>

<content-header id="wire-it-together">Wire it all together</content-header>

<p>Now we have to add the factories for our check and exercise and register it with the application,
add the following to <doc-code>app/config.php</doc-code> and don't forget to import the necessary classes.</p>

<pre><code class="lang-php">CouchDbExercise::class => object(),
CouchDbCheck::class => object(),
</code></pre>

<p>The result should look like:</p>

<pre><code class="lang-php">&lt;?php

use function DI\factory;
use function DI\object;
use Interop\Container\ContainerInterface;
use PhpSchool\SimpleMath\Exercise\GetExercise;
use PhpSchool\CouchDb\CouchDbCheck;
use PhpSchool\SimpleMath\Exercise\CouchDbExercise;
use PhpSchool\SimpleMath\Exercise\Mean;
use PhpSchool\SimpleMath\Exercise\PostExercise;
use PhpSchool\SimpleMath\MyFileSystem;

return [
    //Define your exercise factories here
    Mean::class => factory(function (ContainerInterface $c) {
        return new Mean($c->get(\Symfony\Component\Filesystem\Filesystem::class));
    }),

    CouchDbExercise::class => object(),
    CouchDbCheck::class => object(),
];
</code></pre>

<p>Finally we need to tell the application about our new check and exercise in
<doc-code>app/bootstrap.php</doc-code>. After the  application object is created you just call <doc-code>addCheck</doc-code> &
<doc-code>addExercise</doc-code> with the name of check class and exercise class respectively. Your final
<doc-code>app/bootstrap.php</doc-code> file should look something like:</p>

<pre><code class="lang-php">&lt;?php

ini_set('display_errors', 1);
date_default_timezone_set('Europe/London');
switch (true) {
    case (file_exists(__DIR__ . '/../vendor/autoload.php')):
        // Installed standalone
        require __DIR__ . '/../vendor/autoload.php';
        break;
    case (file_exists(__DIR__ . '/../../../autoload.php')):
        // Installed as a Composer dependency
        require __DIR__ . '/../../../autoload.php';
        break;
    case (file_exists('vendor/autoload.php')):
        // As a Composer dependency, relative to CWD
        require 'vendor/autoload.php';
        break;
    default:
        throw new RuntimeException('Unable to locate Composer autoloader; please run "composer install".');
}

use PhpSchool\CouchDb\CouchDbCheck;
use PhpSchool\PhpWorkshop\Application;
use PhpSchool\SimpleMath\Exercise\CouchDbExercise;
use PhpSchool\SimpleMath\Exercise\Mean;

$app = new Application('Simple Math', __DIR__ . '/config.php');

$app->addExercise(Mean::class);
$app->addExercise(CouchDbExercise::class);
$app->addCheck(CouchDbCheck::class);

$art = &lt;&lt;&lt;ART
  ∞ ÷ ∑ ×

 PHP SCHOOL
SIMPLE MATH
ART;

$app->setLogo($art);
$app->setFgColour('red');
$app->setBgColour('black');

return $app;

</code></pre>

<note type="success">Our exercise is complete - let's try it out!</note>

<content-header id="try-it-out">Try it out!</content-header>

<p>Make sure you have Couch DB installed, run the workshop and select the <doc-code>Couch DB Exercise</doc-code>
exercise.</p>

<p>Try verifying with the solution below which incorrectly sets the total to <doc-code>30</doc-code>, hopefully
you will see a failure.</p>

<pre><code class="lang-php">&lt;?php
require_once __DIR__ . '/vendor/autoload.php';

use Doctrine\CouchDB\CouchDBClient;

$client = CouchDBClient::create(['dbname' => $argv[1]]);
$doc = $client->findDocument($argv[2])->body;

$total = 30; //we guess total is 30
$doc['total'] = $total;
$client->putDocument(['total' => $total, 'numbers' => $doc['numbers']], $argv[2], $doc['_rev']);
echo $total;
</code></pre>

<a href="/img/couch-db-fail.png">
    <img src="/img/couch-db-fail.png" class="doc-terminal-screen">
</a>

<p>And a solution which does pass will yield the output:</p>

<a href="/img/couch-db-success.png">
    <img src="/img/couch-db-success.png" class="doc-terminal-screen">
</a>