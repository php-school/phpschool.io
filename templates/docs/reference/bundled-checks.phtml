<p>This article documents each of the checks bundled with the workshop framework and how to use them. Remember the
    exercise types from the <a href="/docs/reference/exercise-types">Exercise Types documentation</a>?
    <a href="/docs/reference/exercise-types#cli">CLI</a>,
    <a href="/docs/reference/exercise-types#cgi">CGI</a> &
    <a href="/docs/reference/exercise-types#custom">CUSTOM</a>.</p>

<p>Well, checks can support one or more of these exercise types
    types. So inspect the table below to see if the check you want to use actually supports your exercise type.</p>


<bundled-checks></bundled-checks>

<content-header id="check-functional-requirements">Functional Requirements Check</content-header>
<p>Here is an example of how to force the student to use the function <doc-code>curl_exec</doc-code> and ban the usage of
<doc-code>file_get_contents</doc-code>. This could be useful if you wanted to teach advanced configuration of data transfers.</p>

<pre><code class="lang-php">class MyExercise extends AbstractExercise
        implements ExerciseInterface, FunctionRequirementsExerciseCheck
{
    ...snip

    /**
     * @param ExerciseDispatcher $dispatcher
     */
    public function configure(ExerciseDispatcher $dispatcher)
    {
        $dispatcher->requireCheck(FunctionRequirementsCheck::class);
    }

    /**
     * @return string[]
     */
    public function getRequiredFunctions()
    {
        return ['curl_exec'];
    }

    /**
     * @return string[]
     */
    public function getBannedFunctions()
    {
        return ['file_get_contents'];
    }
}
</code></pre>

<p>If a student submitted something like:</p>
<pre><code class="lang-php">&lt;?php

echo file_get_contents('http://example.com');
</code></pre>

<p>The output would be something along the lines of:</p>
<a href="/img/func-requirements.png"><img src="/img/func-requirements.png" class="doc-terminal-screen"></a>

<content-header id="check-composer">Composer Check</content-header>
<p>Here is an example of how to force the student to require the <doc-code>nikic/fast-route</doc-code> package via Composer. This
is useful if you want to focus on a specific problem or promote popular/battle tested packages.</p>

<pre><code class="lang-php">class MyExercise extends AbstractExercise
        implements ExerciseInterface, ComposerExerciseCheck
{
    ...snip

    /**
     * @param ExerciseDispatcher $dispatcher
     */
    public function configure(ExerciseDispatcher $dispatcher)
    {
        $dispatcher->requireCheck(ComposerCheck::class);
    }

    /**
     * @return array
     */
    public function getRequiredPackages()
    {
        return [
            'nikic/fast-route'
        ];
    }
}
</code></pre>

<p>A number of failures can occur here, the student may not even have a <doc-code>composer.json</doc-code> or
    a <doc-code>composer.lock</doc-code> file. If this is the
case, the check will fail and a message will be printed. If the required files are present, but the
package has not been found, the output will look like the following:</p>

<a href="/img/composer-check.png"><img src="/img/composer-check.png" class="doc-terminal-screen"></a>

<content-header id="check-database">Database Check</content-header>
<p>Here is an example where we require that the student insert a record in to the <doc-code>users</doc-code> table which we
    will create in the <doc-code>seed</doc-code> method of our check. We will then verify that there are some records in the
    <doc-code>users</doc-code> table.</p>

<pre><code class="lang-php">class MyExercise extends AbstractExercise
        implements ExerciseInterface, DatabaseExerciseCheck
{
    ...snip

    /**
     * @param ExerciseDispatcher $dispatcher
     */
    public function configure(ExerciseDispatcher $dispatcher)
    {
        $dispatcher->requireCheck(DatabaseCheck::class);
    }

    /**
     * @param PDO $db
     * @return void
     */
    public function seed(PDO $db)
    {
        $db->exec('CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER, gender TEXT)');
    }

    /**
     * @param PDO $db
     * @return bool
     */
    public function verify(PDO $db)
    {
        return $db->query('select COUNT(*) from users')->fetchColumn() > 0;
    }
}
</code></pre>

<p>If the student did not insert into the database, for example, if they submitted the following:</p>
<pre><code class="lang-php">&lt;?php

echo "Where is the database?";
</code></pre>
<p>Then they would receive the following failure:</p>

<a href="/img/database-check-failure.png"><img src="/img/database-check-failure.png" class="doc-terminal-screen"></a>
<p>If they submitted a proper solution, like the following:</p>
<pre><code class="lang-php">&lt;?php

$dsn = $argv[1];
$db = new PDO($dsn);
$stmt = $db->prepare('INSERT INTO users (name, age, gender) VALUES (:name, :age, :gender)');
$stmt->execute([':name' => 'Karl Renner', ':age' => 80, ':gender' => 'Male']);

</code></pre>
<p>They would receive this success:</p>

<a href="/img/database-check-success.png"><img src="/img/database-check-success.png" class="doc-terminal-screen"></a>